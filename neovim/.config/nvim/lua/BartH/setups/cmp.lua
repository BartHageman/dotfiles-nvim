  local status_cmp_ok, cmp = pcall(require, "cmp")
  if not status_cmp_ok then
    return
  end
  local status_luasnip_ok, luasnip = pcall(require, "luasnip")
  if not status_luasnip_ok then
    return
  end
  cmpsettings = {
        enabled = function()
            local in_prompt = vim.api.nvim_buf_get_option(0, "buftype") == "prompt"
            if in_prompt then
                return false
            end
            local context = require "cmp.config.context"
            return not (context.in_treesitter_capture "comment" == true or context.in_syntax_group "Comment")
        end,
        window = {
            documentation = {
                -- border = "rounded"
                border = {"ü≠Ω", "‚ñî", "ü≠æ", "‚ñï", "ü≠ø", "‚ñÅ", "ü≠º", "‚ñè"}
            }
        },
        experimental = {
            ghost_text = true,
        },
        confirmation = {
            get_commit_characters = function()
                return {}
            end,
        },
        view = {
            entries = "custom",
        },
        completion = {
            completeopt = "menuone,noinsert,noselect",
            keyword_pattern = [[\%(-\?\d\+\%(\.\d\+\)\?\|\h\w*\%(-\w*\)*\)]],
            keyword_length = 1,
        },
        formatting = {
            fields = { "kind", "abbr", "menu" },
            kind_icons = {
                Class = "Ô†ñ ",
                Color = "Óà´ ",
                Constant = "Ô£ø ",
                Constructor = "Ôê• ",
                Enum = "Ô©ó",
                EnumMember = "ÔÖù ",
                Event = "ÔÉß ",
                Field = "Óúñ ",
                File = "Ôúò",
                Folder = "Ôùä ",
                Function = "Ôûî ",
                Interface = "Ô∞Æ ",
                Keyword = "Ô†ä ",
                Method = "ÓÉå ",
                Module = "Ôô® ",
                Operator = "Ôöî",
                Property = "Óò§ ",
                Reference = "Ôúú ",
                Snippet = "ÔÉÑ ",
                Struct = "ÔÉä ",
                Text = "Ôùæ ",
                TypeParameter = "ÔûÉ ",
                Unit = "Ô•¨",
                Value = "Ô¢ü ",
                Variable = "Ôö¶ ",
            },
            source_names = {
                nvim_lsp = "LSP",
                emoji = "Emoji",
                path = "Path",
                calc = "Calc",
                vsnip = "Snippet",
                luasnip = "Snippet",
                buffer = "Buffer",
                nvim_lua = "Lua",
                treesitter = "Treesitter",
                crates = "Crates",
            },
            format = function(entry, vim_item)
                vim_item.kind = cmpsettings.formatting.kind_icons[vim_item.kind]
                vim_item.menu = cmpsettings.formatting.source_names[entry.source.name]
                return vim_item
            end,
        },
        snippet = {
            expand = function(args)
                require("luasnip").lsp_expand(args.body)
            end,
        },
        sources = {
            { name = "nvim_lsp" },
            { name = "nvim_lua" },
            { name = "path" },
            { name = "luasnip"},
            { name = "buffer", keyword_length = 5},
            { name = "calc" },
            { name = "emoji" },
            { name = "treesitter" },
            { name = "crates" },
        },
        mapping = cmp.mapping.preset.insert({
            ["<C-d>"] = cmp.mapping.scroll_docs(-4),
            ["<C-f>"] = cmp.mapping.scroll_docs(4),
            ["<C-y>"] = cmp.mapping.confirm({select = true}),
            ["<C-Space>"] = cmp.mapping.complete(),
            ["<C-e>"] = cmp.mapping.close(),
        })
  }
require("luasnip/loaders/from_vscode").lazy_load()
require("cmp").setup(cmpsettings)
